Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     ecrire -> ECRIRE ( expr ) ;
Rule 5     fact -> variable
Rule 6     fact -> ENTIER
Rule 7     fact -> ( expr )
Rule 8     produit -> LIRE
Rule 9     produit -> produit % fact
Rule 10    produit -> produit / fact
Rule 11    produit -> produit * fact
Rule 12    produit -> - fact
Rule 13    produit -> fact
Rule 14    expr -> booleen
Rule 15    expr -> expr - produit
Rule 16    expr -> expr + produit
Rule 17    booleen -> variable
Rule 18    booleen -> FAUX
Rule 19    booleen -> VRAI
Rule 20    booleen -> produit
Rule 21    instruction -> IDENTIFIANT = expr ;
Rule 22    variable -> IDENTIFIANT

Unused terminals:

    INFERIEUR_OU_EGAL

Terminals, with rules where they appear:

%                    : 9
(                    : 4 7
)                    : 4 7
*                    : 11
+                    : 16
-                    : 12 15
/                    : 10
;                    : 4 21
=                    : 21
ECRIRE               : 4
ENTIER               : 6
FAUX                 : 18
IDENTIFIANT          : 21 22
INFERIEUR_OU_EGAL    : 
LIRE                 : 8
VRAI                 : 19
error                : 

Nonterminals, with rules where they appear:

booleen              : 14
ecrire               : 
expr                 : 4 7 15 16 21
fact                 : 9 10 11 12 13
instruction          : 2 3
listeInstructions    : 1 2
produit              : 9 10 11 15 16 20
prog                 : 0
variable             : 5 17


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (21) instruction -> . IDENTIFIANT = expr ;
    IDENTIFIANT     shift and go to state 4

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (21) instruction -> . IDENTIFIANT = expr ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    IDENTIFIANT     shift and go to state 4

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 5

state 4

    (21) instruction -> IDENTIFIANT . = expr ;
    =               shift and go to state 6


state 5

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 6

    (21) instruction -> IDENTIFIANT = . expr ;
    (14) expr -> . booleen
    (15) expr -> . expr - produit
    (16) expr -> . expr + produit
    (17) booleen -> . variable
    (18) booleen -> . FAUX
    (19) booleen -> . VRAI
    (20) booleen -> . produit
    (22) variable -> . IDENTIFIANT
    (8) produit -> . LIRE
    (9) produit -> . produit % fact
    (10) produit -> . produit / fact
    (11) produit -> . produit * fact
    (12) produit -> . - fact
    (13) produit -> . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    FAUX            shift and go to state 13
    VRAI            shift and go to state 14
    IDENTIFIANT     shift and go to state 7
    LIRE            shift and go to state 15
    -               shift and go to state 10
    ENTIER          shift and go to state 17
    (               shift and go to state 18

    expr                           shift and go to state 8
    booleen                        shift and go to state 9
    produit                        shift and go to state 11
    variable                       shift and go to state 12
    fact                           shift and go to state 16

state 7

    (22) variable -> IDENTIFIANT .
    ;               reduce using rule 22 (variable -> IDENTIFIANT .)
    -               reduce using rule 22 (variable -> IDENTIFIANT .)
    +               reduce using rule 22 (variable -> IDENTIFIANT .)
    %               reduce using rule 22 (variable -> IDENTIFIANT .)
    /               reduce using rule 22 (variable -> IDENTIFIANT .)
    *               reduce using rule 22 (variable -> IDENTIFIANT .)
    )               reduce using rule 22 (variable -> IDENTIFIANT .)


state 8

    (21) instruction -> IDENTIFIANT = expr . ;
    (15) expr -> expr . - produit
    (16) expr -> expr . + produit
    ;               shift and go to state 19
    -               shift and go to state 20
    +               shift and go to state 21


state 9

    (14) expr -> booleen .
    ;               reduce using rule 14 (expr -> booleen .)
    -               reduce using rule 14 (expr -> booleen .)
    +               reduce using rule 14 (expr -> booleen .)
    )               reduce using rule 14 (expr -> booleen .)


state 10

    (12) produit -> - . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    (22) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 17
    (               shift and go to state 18
    IDENTIFIANT     shift and go to state 7

    fact                           shift and go to state 22
    variable                       shift and go to state 23

state 11

    (20) booleen -> produit .
    (9) produit -> produit . % fact
    (10) produit -> produit . / fact
    (11) produit -> produit . * fact
    ;               reduce using rule 20 (booleen -> produit .)
    -               reduce using rule 20 (booleen -> produit .)
    +               reduce using rule 20 (booleen -> produit .)
    )               reduce using rule 20 (booleen -> produit .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 12

    (17) booleen -> variable .
    (5) fact -> variable .
  ! reduce/reduce conflict for ; resolved using rule 5 (fact -> variable .)
  ! reduce/reduce conflict for - resolved using rule 5 (fact -> variable .)
  ! reduce/reduce conflict for + resolved using rule 5 (fact -> variable .)
  ! reduce/reduce conflict for ) resolved using rule 5 (fact -> variable .)
    %               reduce using rule 5 (fact -> variable .)
    /               reduce using rule 5 (fact -> variable .)
    *               reduce using rule 5 (fact -> variable .)
    ;               reduce using rule 5 (fact -> variable .)
    -               reduce using rule 5 (fact -> variable .)
    +               reduce using rule 5 (fact -> variable .)
    )               reduce using rule 5 (fact -> variable .)


state 13

    (18) booleen -> FAUX .
    ;               reduce using rule 18 (booleen -> FAUX .)
    -               reduce using rule 18 (booleen -> FAUX .)
    +               reduce using rule 18 (booleen -> FAUX .)
    )               reduce using rule 18 (booleen -> FAUX .)


state 14

    (19) booleen -> VRAI .
    ;               reduce using rule 19 (booleen -> VRAI .)
    -               reduce using rule 19 (booleen -> VRAI .)
    +               reduce using rule 19 (booleen -> VRAI .)
    )               reduce using rule 19 (booleen -> VRAI .)


state 15

    (8) produit -> LIRE .
    %               reduce using rule 8 (produit -> LIRE .)
    /               reduce using rule 8 (produit -> LIRE .)
    *               reduce using rule 8 (produit -> LIRE .)
    ;               reduce using rule 8 (produit -> LIRE .)
    -               reduce using rule 8 (produit -> LIRE .)
    +               reduce using rule 8 (produit -> LIRE .)
    )               reduce using rule 8 (produit -> LIRE .)


state 16

    (13) produit -> fact .
    %               reduce using rule 13 (produit -> fact .)
    /               reduce using rule 13 (produit -> fact .)
    *               reduce using rule 13 (produit -> fact .)
    ;               reduce using rule 13 (produit -> fact .)
    -               reduce using rule 13 (produit -> fact .)
    +               reduce using rule 13 (produit -> fact .)
    )               reduce using rule 13 (produit -> fact .)


state 17

    (6) fact -> ENTIER .
    %               reduce using rule 6 (fact -> ENTIER .)
    /               reduce using rule 6 (fact -> ENTIER .)
    *               reduce using rule 6 (fact -> ENTIER .)
    ;               reduce using rule 6 (fact -> ENTIER .)
    -               reduce using rule 6 (fact -> ENTIER .)
    +               reduce using rule 6 (fact -> ENTIER .)
    )               reduce using rule 6 (fact -> ENTIER .)


state 18

    (7) fact -> ( . expr )
    (14) expr -> . booleen
    (15) expr -> . expr - produit
    (16) expr -> . expr + produit
    (17) booleen -> . variable
    (18) booleen -> . FAUX
    (19) booleen -> . VRAI
    (20) booleen -> . produit
    (22) variable -> . IDENTIFIANT
    (8) produit -> . LIRE
    (9) produit -> . produit % fact
    (10) produit -> . produit / fact
    (11) produit -> . produit * fact
    (12) produit -> . - fact
    (13) produit -> . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    FAUX            shift and go to state 13
    VRAI            shift and go to state 14
    IDENTIFIANT     shift and go to state 7
    LIRE            shift and go to state 15
    -               shift and go to state 10
    ENTIER          shift and go to state 17
    (               shift and go to state 18

    expr                           shift and go to state 27
    booleen                        shift and go to state 9
    produit                        shift and go to state 11
    variable                       shift and go to state 12
    fact                           shift and go to state 16

state 19

    (21) instruction -> IDENTIFIANT = expr ; .
    IDENTIFIANT     reduce using rule 21 (instruction -> IDENTIFIANT = expr ; .)
    $end            reduce using rule 21 (instruction -> IDENTIFIANT = expr ; .)


state 20

    (15) expr -> expr - . produit
    (8) produit -> . LIRE
    (9) produit -> . produit % fact
    (10) produit -> . produit / fact
    (11) produit -> . produit * fact
    (12) produit -> . - fact
    (13) produit -> . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    (22) variable -> . IDENTIFIANT
    LIRE            shift and go to state 15
    -               shift and go to state 10
    ENTIER          shift and go to state 17
    (               shift and go to state 18
    IDENTIFIANT     shift and go to state 7

    produit                        shift and go to state 28
    fact                           shift and go to state 16
    variable                       shift and go to state 23

state 21

    (16) expr -> expr + . produit
    (8) produit -> . LIRE
    (9) produit -> . produit % fact
    (10) produit -> . produit / fact
    (11) produit -> . produit * fact
    (12) produit -> . - fact
    (13) produit -> . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    (22) variable -> . IDENTIFIANT
    LIRE            shift and go to state 15
    -               shift and go to state 10
    ENTIER          shift and go to state 17
    (               shift and go to state 18
    IDENTIFIANT     shift and go to state 7

    produit                        shift and go to state 29
    fact                           shift and go to state 16
    variable                       shift and go to state 23

state 22

    (12) produit -> - fact .
    %               reduce using rule 12 (produit -> - fact .)
    /               reduce using rule 12 (produit -> - fact .)
    *               reduce using rule 12 (produit -> - fact .)
    ;               reduce using rule 12 (produit -> - fact .)
    -               reduce using rule 12 (produit -> - fact .)
    +               reduce using rule 12 (produit -> - fact .)
    )               reduce using rule 12 (produit -> - fact .)


state 23

    (5) fact -> variable .
    %               reduce using rule 5 (fact -> variable .)
    /               reduce using rule 5 (fact -> variable .)
    *               reduce using rule 5 (fact -> variable .)
    ;               reduce using rule 5 (fact -> variable .)
    -               reduce using rule 5 (fact -> variable .)
    +               reduce using rule 5 (fact -> variable .)
    )               reduce using rule 5 (fact -> variable .)


state 24

    (9) produit -> produit % . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    (22) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 17
    (               shift and go to state 18
    IDENTIFIANT     shift and go to state 7

    fact                           shift and go to state 30
    variable                       shift and go to state 23

state 25

    (10) produit -> produit / . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    (22) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 17
    (               shift and go to state 18
    IDENTIFIANT     shift and go to state 7

    fact                           shift and go to state 31
    variable                       shift and go to state 23

state 26

    (11) produit -> produit * . fact
    (5) fact -> . variable
    (6) fact -> . ENTIER
    (7) fact -> . ( expr )
    (22) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 17
    (               shift and go to state 18
    IDENTIFIANT     shift and go to state 7

    fact                           shift and go to state 32
    variable                       shift and go to state 23

state 27

    (7) fact -> ( expr . )
    (15) expr -> expr . - produit
    (16) expr -> expr . + produit
    )               shift and go to state 33
    -               shift and go to state 20
    +               shift and go to state 21


state 28

    (15) expr -> expr - produit .
    (9) produit -> produit . % fact
    (10) produit -> produit . / fact
    (11) produit -> produit . * fact
    ;               reduce using rule 15 (expr -> expr - produit .)
    -               reduce using rule 15 (expr -> expr - produit .)
    +               reduce using rule 15 (expr -> expr - produit .)
    )               reduce using rule 15 (expr -> expr - produit .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 29

    (16) expr -> expr + produit .
    (9) produit -> produit . % fact
    (10) produit -> produit . / fact
    (11) produit -> produit . * fact
    ;               reduce using rule 16 (expr -> expr + produit .)
    -               reduce using rule 16 (expr -> expr + produit .)
    +               reduce using rule 16 (expr -> expr + produit .)
    )               reduce using rule 16 (expr -> expr + produit .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 30

    (9) produit -> produit % fact .
    %               reduce using rule 9 (produit -> produit % fact .)
    /               reduce using rule 9 (produit -> produit % fact .)
    *               reduce using rule 9 (produit -> produit % fact .)
    ;               reduce using rule 9 (produit -> produit % fact .)
    -               reduce using rule 9 (produit -> produit % fact .)
    +               reduce using rule 9 (produit -> produit % fact .)
    )               reduce using rule 9 (produit -> produit % fact .)


state 31

    (10) produit -> produit / fact .
    %               reduce using rule 10 (produit -> produit / fact .)
    /               reduce using rule 10 (produit -> produit / fact .)
    *               reduce using rule 10 (produit -> produit / fact .)
    ;               reduce using rule 10 (produit -> produit / fact .)
    -               reduce using rule 10 (produit -> produit / fact .)
    +               reduce using rule 10 (produit -> produit / fact .)
    )               reduce using rule 10 (produit -> produit / fact .)


state 32

    (11) produit -> produit * fact .
    %               reduce using rule 11 (produit -> produit * fact .)
    /               reduce using rule 11 (produit -> produit * fact .)
    *               reduce using rule 11 (produit -> produit * fact .)
    ;               reduce using rule 11 (produit -> produit * fact .)
    -               reduce using rule 11 (produit -> produit * fact .)
    +               reduce using rule 11 (produit -> produit * fact .)
    )               reduce using rule 11 (produit -> produit * fact .)


state 33

    (7) fact -> ( expr ) .
    %               reduce using rule 7 (fact -> ( expr ) .)
    /               reduce using rule 7 (fact -> ( expr ) .)
    *               reduce using rule 7 (fact -> ( expr ) .)
    ;               reduce using rule 7 (fact -> ( expr ) .)
    -               reduce using rule 7 (fact -> ( expr ) .)
    +               reduce using rule 7 (fact -> ( expr ) .)
    )               reduce using rule 7 (fact -> ( expr ) .)


Conflicts:

reduce/reduce conflict in state 12 resolved using rule fact -> variable
rejected rule (booleen -> variable) in state 12
Rule (booleen -> variable) is never reduced